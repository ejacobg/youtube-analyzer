brary(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
#
#read csv file #
csv_path <- file.path(getwd(), "a.csv")#
data <- read.csv(csv_path)#
#
#read csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_totals <- read.csv(csv_path_total)#
# calculate percentage of total views for each category#
data_totals$percent <- data_totals$total_views / sum(data_totals$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()#
#
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100), "%")), position = position_stack(vjust = 0.5))
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()
#read csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_totals <- read.csv(csv_path_total)#
# calculate percentage of total views for each category#
data_totals$percent <- data_totals$total_views / sum(data_totals$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_totals, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()#
#
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100), "%")), position = position_stack(vjust = 0.5))
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100), "%")), position = position_stack(vjust = 0.5))
# calculate percentage of total views for each category#
data_totals$percent <- data_totals$total_views / sum(data_totals$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_totals, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()#
#
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100), "%")), position = position_stack(vjust = 1))
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(labels = paste0(data_video$category, " (", round(data_video$percent*100), "%)")) +#
  guides(fill = guide_legend(title = "Category"))#
#
# remove the percentage labels from the chart#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal")
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = paste0(data_video$category, " (", round(data_video$percent*100), "%)"))#
#
# remove the percentage labels from the chart#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal")
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = paste0(data_video$category, " (", round(data_video$percent*100), "%)"))
# remove the percentage labels from the chart#
pie_chart + theme(legend.position = "left", legend.box = "vertical")
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = paste0(data_video$category, " (", round(data_video$percent*100), "%)"))#
#
# remove the percentage labels from the chart#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal")
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label = paste0(data_video$category, " (", round(data_video$percent*100), "%)")))
d csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_video
csv_path_total <- file.path(getwd(), "b.csv")#
data_video <- read.csv(csv_path_total)
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label
#read csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_video <- read.csv(csv_path_total)#
#
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label = paste0(data_video$category, " (", round(data_video$percent*100), "%)")))
csv_path <- file.path(getwd(), "a.csv")#
data <- read.csv(csv_path)#
#
#read csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_video <- read.csv(csv_path_total)#
#
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label = paste0(data_video$category, " (", round(data_video$percent*100), "%)")))
csv_path_total <- file.path(getwd(), "b.csv")#
data_video <- read.csv(csv_path_total)#
#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)")) +#
  scale_fill_discrete(labels = paste0(data_video$category, " (", round(data_video$percent*100), "%)")) +#
  theme(legend.text = element_text(size = 12))
# calculate percentage of total views for each category#
data_video$percent <- data_video$total_views / sum(data_video$total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label = paste0(data_video$category, " (", round(data_video$percent*100), "%)")))
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category") +#
  scale_fill_discrete(name = "Category", labels = data_video$category)#
#
# modify the legend title and label to include percentages#
pie_chart + theme(legend.position = "bottom", legend.box = "horizontal") +#
  guides(fill = guide_legend(title = "Category (Percent)",#
                              label = paste0(data_video$category, " (", round(data_video$percent*100), "%)")))
# calculate percentage of total views for each category#
data_video$percent <- data_video $total_views / sum(data_video $total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()#
#
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100),
d csv file #
csv_path_total <- file.path(getwd(), "b.csv")#
data_video <- read.csv(csv_path_total)#
# calculate percentage of total views for each category#
data_video$percent <- data_video $total_views / sum(data_video $total_views)#
#
# create a pie chart with category as the label and percent as the value#
pie_chart <- ggplot(data_video, aes(x = "", y = percent, fill = category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  theme_void()#
#
# add percentage labels to the chart#
pie_chart + geom_text(aes(label = paste0(round(percent * 100), "%")), position = position_stack(vjust = 0.5))
#Comment and View Ratio #
# Read in the first CSV file as a data frame#
df1 <- read.csv("cv1.csv")#
#
# Read in the second CSV file as a data frame#
df2 <- read.csv("cv2.csv")#
#
# Combine the two data frames using rbind()#
merged_df <- rbind(df1, df2)
correlation <- cor(merged_df $views, merged_df$comments)
correlation
ggplot(merged_df, aes(x = views, y = comments)) + geom_histogram2d(binwidth = c(1000, 10)) + scale_x_continuous("Views") + scale_y_continuous("Comments")
# Create the histogram using ggplot2#
ggplot(merged_df, aes(x = views, y = comments)) +#
  geom_histogram2d(binwidth = c(1000, 10)) +#
  scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
library(ggplot2)
the histogram using ggplot2#
#
# Create the histogram using ggplot2#
ggplot(merged_df, aes(x = views, y = comments)) +#
  geom_histogram2d(binwidth = c(1000, 10)) +#
  scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
#install packages for data visulization #
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)
# Create the histogram using ggplot2#
ggplot(merged_df, aes(x = views, y = comments)) +#
  geom_histogram2d(binwidth = c(1000, 10)) +#
  scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
# Create the histogram using ggplot2#
ggplot(df, aes(x = views, y = comments)) +#
  geom_bin2d(binwidth = c(1000, 10)) +#
  scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
ggplot2#
# Create the histogram using ggplot2#
ggplot(merged_df, aes(x = views, y = comments)) +#
  geom_bin2d(binwidth = c(1000, 10)) +#
  scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
# Create the histogram using ggplot2#
# Create the histogram using ggplot2#
ggplot(merged_df, aes(x = views, y = comments)) +#
  geom_bin2d( scale_x_continuous("Views") +#
  scale_y_continuous("Comments")
# Combine the two data frames using rbind()#
merged_df <- rbind(df1, df2)#
#
correlation <- cor(merged_df $views, merged_df$comments)#
correlation
#Comment and View Ratio #
# Read in the first CSV file as a data frame#
df1 <- read.csv("cv1.csv")#
#
# Read in the second CSV file as a data frame#
df2 <- read.csv("cv2.csv")#
#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
#
correlation <- cor(df$views, df$comments)#
correlation#
#
# Create the 2D histogram using hist()#
hist2d <- hist2d(x = df$views, y = df$comments,#
                 breaks = list(x = seq(0, max(df$views), by = 1000), y = seq(0, max(df$comments), by = 10)),#
                 col = "blue", main = "2D Histogram of Views vs Comments",#
                 xlab = "Views", ylab = "Comments")#
#
# Plot the 2D histogram using plot()#
plot(hist2d, col = terrain.colors(100), border = NA)
# Create the 2D histogram using hist()#
hist2d <- hist2d(x = df$views, y = df$comments, breaks = list(x = seq(0, max(df$views), by = 1000), y = seq(0, max(df$comments), by = 10)), col = "blue", main = "2D Histogram of Views vs Comments", xlab = "Views", ylab = "Comments")#
#
# Plot the 2D histogram using plot()#
plot(hist2d, co
ion#
#
# Create the 2D histogram using hist()#
hist2d <- hist2d(x = df$views, y = df$comments, breaks = list(x = seq(0, max(df$views), by = 1000), y = seq(0, max(df$comments), by = 10)), col = "blue", main = "2D Histogram of Views vs Comments", xlab = "Views", ylab = "Comments")#
#
# Plot the 2D histogram using plot()#
plot(hist2d, col = terrain.colors(100), border = NA)
hist2d <- hist2d(x = df$views, y = df$comments, breaks = list(x = seq(0, max(df$views), by = 1000), y = seq(0, max(df$comments), by = 10)), col = "blue", main = "2D Histogram of Views vs Comments", xlab = "Views", ylab = "Comments")
ggplot(df, aes(x = views, y = comments)) + geom_bin2d(bins = 50) + scale_fill_gradient(low = "white", high = "steelblue") + labs(title = "2D Histogram of Views vs Comments", x = "Views", y = "Comments")
hist(df$views, df$comments)
Create a data frame with views and comments#
df <- data.frame(#
  views = c(1000, 2000, 1500, 3000, 4000),#
  comments = c(10, 20, 15, 30, 40)#
)#
#
# Create a histogram with ggplot2#
ggplot(df, aes(x = views, y = comments)) +#
  geom_histogram(stat = "identity", bins = 10, fill = "blue", alpha = 0.5) +#
  ggtitle("Views vs Comments") +#
  xlab("Views") +#
  ylab("Comments")
# Create a histogram with ggplot2#
ggplot(df, aes(x = views, y = comments)) +#
  geom_histogram(stat = "identity", bins = 10, fill = "blue", alpha = 0.5) +#
  ggtitle("Views vs Comments") +#
  xlab("Views") +#
  ylab("Comments")
#Comment and View Ratio #
# Read in the first CSV file as a data frame#
df1 <- read.csv("cv1.csv")#
#
# Read in the second CSV file as a data frame#
df2 <- read.csv("cv2.csv")#
#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
#
correlation <- cor(df$views, df$comments)#
correlation#
#
# Load the ggplot2 package#
library(ggplot2)#
# Create a histogram with ggplot2#
ggplot(df, aes(x = views, y = comments)) +#
  geom_histogram(stat = "identity", bins = 10, fill = "blue", alpha = 0.5) +#
  ggtitle("Views vs Comments") +#
  xlab("Views") +#
  ylab("Comments")
len(df$comments)
length(df$comments)
length(df$views)
plot(x, y, main = "X vs Y", xlab = "X-axis label", ylab = "Y-axis label")
# Create some example data#
x <- c(1, 2, 3, 4, 5)#
y <- c(2, 4, 6, 8, 10)#
#
# Plot x against y#
plot(x, y, main = "X vs Y", xlab = "X-axis label", ylab = "Y-axis label")
st y#
plot(df$views, df$comments, main = "X vs Y", xlab = "X-axis label", ylab = "Y-axis label")
correlation <- cor(df$views, df$comments)#
correlation
ggplot(df, aes(x = views, y = comments)) +#
  geom_histogram(stat = "identity", bins = 10, fill = "blue", alpha = 0.5) +#
  ggtitle("Views vs Comments") +#
  xlab("Views") +#
  ylab("Comments")
correlation <- cor(df$views, df$comments)#
correlation#
max(df$views)#
max(df$comments)
# Load the ggplot2 package#
library(ggplot2)#
# Create a histogram with ggplot2#
ggplot(df, aes(x = views, y = comments)) +#
  geom_histogram(stat = "identity", bins = 1, fill = "blue", alpha = 0.5) +#
  ggtitle("Views vs Comments") +#
  xlab("Views") +#
  ylab("Comments")
#install packages for data visulization #
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
library(GGally)#
# Disable scientific notation#
options(scipen = 999)#
#=====================================================#
#read csv files#
#
#read this file for the pie chart #
csv_path <- file.path(getwd(), "most_viewed.csv")#
data <- read.csv(csv_path)#
#
#read this file for the bar graphs #
csv_path_total <- file.path(getwd(), "total_views.csv")#
data_video <- read.csv(csv_path_total)#
#
#read these files for the comment vs views #
# Read in the first CSV file as a data frame#
df1 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df2 <- read.csv("views_comments_1.csv")#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
# Read in the data as a data frame#
df <- read.csv("cv_data.csv")#
print(df)#
# Read in the data as a data frame#
df3 <- read.csv("Degree.csv")#
df4 <- read.csv("comments1.csv")#
# Read in the second CSV file as a data frame#
df5 <- read.csv("comments2.csv")#
# Combine the two data frames using rbind()#
df_comment <- rbind(df4, df5)#
# merge the data frames based on videoID#
#
df_comment_degree <- merge(df3, df_comment, by = "videoID")#
#=====================================================#
#Create a Pie chart that shows which category is the most popular #
#
library(ggplot2)#
library(dplyr)#
#
# create a new column called "new_category"#
data_video$new_category <- ifelse(data_video$percent < 0.1, "Other", data_video$category)#
#
# group the data by "new_category" and calculate the sum of "percent" and "total_views" for each group#
data_video_new <- data_video %>%#
  group_by(new_category) %>%#
  summarize(total_views = sum(total_views),#
            percent = sum(percent))#
#
# Define a vector of blues for the fill color scale#
blues <- c("#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494")#
#
# Create the pie chart with the modified fill scale#
ggplot(data_video_new, aes(x = "", y = percent, fill = new_category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  scale_fill_manual(values = blues) + # specify the blue color palette#
  theme_void() +#
  geom_text(aes(label = ifelse(percent >= 0.1, paste0(round(percent * 100), "%"), "")), #
            position = position_stack(vjust = 0.5))#
#
pie_chart#
#
#=====================================================#
# Create the bar chart#
bar_chart <- ggplot(data, aes(x = category, y = al, fill = category)) +#
  geom_bar(stat = "identity") +#
  labs(x = "Category", y = "Average video length in seconds", fill = "Category") +#
  ggtitle("Video Lengths by Category")+#
  theme(axis.text.x = element_blank(),#
        axis.ticks.x = element_blank())#
#
bar_chart #
#=====================================================#
#Views Vs Comments #
#
df <- df_comment_degree#
# Calculate the median value of views#
views_median <- median(df_comment_degree$views)#
#
# Divide the videos into two groups: high views and low views#
high_views <- df[df$views > views_median, ]#
low_views <- df[df$views <= views_median, ]#
# Calculate the mean number of comments for each group#
high_views_mean <- mean(high_views$comments)#
low_views_mean <- mean(low_views$comments)#
#
# Create a new data frame for the boxplot#
boxplot_data <- data.frame(group = c(rep("High Views", nrow(high_views)), rep("Low Views", nrow(low_views))),#
                           comments = c(high_views$comments, low_views$comments))#
#
# Create a boxplot with ggplot2#
ggplot(boxplot_data, aes(x = group, y = comments)) +#
  geom_boxplot() +#
  geom_point(aes(color = group), alpha = .5, position = position_jitter(width = .15)) +#
  labs(title = "Relationship between Views and Comments on Videos",#
       x = "",#
       y = "Comments") +#
  stat_compare_means(method = "t.test", label = "p.format") #
# Create a scatter plot #
ggplot(df_comment_degree, aes(x = views, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
   scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Scatterplot of Views and Comments on Videos",#
       x = "Views",#
       y = "Comments")#
ggplot(df_comment_degree, aes(x = degree, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
  labs(title = "Scatterplot of Degree and Comments on Videos",#
       x = "Degree",#
       y = "Comments")#
#compare the two #
#
# create a linear regression model#
model <- lm(comments ~ views + degree, data = df_comment_degree)#
#
# print the summary of the model#
summary(model)#
library(ggplot2)#
  ggplot(df_comment_degree, aes(x = views, y = degree, size = comments)) + #
  geom_point(alpha = .5, color = "#3366FF") +#
  scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Impact of Views and Degree on Comments",#
       x = "Views",#
       y = "Degree",#
       size = "Number of Comments")#
#=====================================================
df_comment_degree <- merge(df3, df_comment, by = "videoID")
df3 <- read.csv("Degree.csv")
Read in the first CSV file as a data frame#
df1 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df2 <- read.csv("views_comments_1.csv")#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
# Read in the data as a data frame#
df <- read.csv("cv_data.csv")#
print(df)#
# Read in the data as a data frame#
df3 <- read.csv("Degree.csv")#
df4 <- read.csv("comments1.csv")#
# Read in the second CSV file as a data frame#
df5 <- read.csv("comments2.csv")#
# Combine the two data frames using rbind()#
df_comment <- rbind(df4, df5)#
# merge the data frames based on videoID#
#
df_comment_degree <- merge(df3, df_comment, by = "videoID")
#install packages for data visulization #
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
library(GGally)#
# Disable scientific notation#
options(scipen = 999)#
#=====================================================#
#read csv files#
#
#read this file for the pie chart #
csv_path <- file.path(getwd(), "most_viewed.csv")#
data <- read.csv(csv_path)#
#
#read this file for the bar graphs #
csv_path_total <- file.path(getwd(), "total_views.csv")#
data_video <- read.csv(csv_path_total)#
#
#read these files for the comment vs views #
# Read in the first CSV file as a data frame#
df1 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df2 <- read.csv("views_comments_1.csv")#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
# Read in the data as a data frame#
df <- read.csv("cv_data.csv")#
print(df)#
# Read in the data as a data frame#
df3 <- read.csv("Degree.csv")#
df4 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df5 <- read.csv("views_comments_2.csv")#
# Combine the two data frames using rbind()#
df_comment <- rbind(df4, df5)#
# merge the data frames based on videoID#
#
df_comment_degree <- merge(df3, df_comment, by = "videoID")#
#=====================================================#
#Create a Pie chart that shows which category is the most popular #
#
library(ggplot2)#
library(dplyr)#
#
# create a new column called "new_category"#
data_video$new_category <- ifelse(data_video$percent < 0.1, "Other", data_video$category)#
#
# group the data by "new_category" and calculate the sum of "percent" and "total_views" for each group#
data_video_new <- data_video %>%#
  group_by(new_category) %>%#
  summarize(total_views = sum(total_views),#
            percent = sum(percent))#
#
# Define a vector of blues for the fill color scale#
blues <- c("#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494")#
#
# Create the pie chart with the modified fill scale#
ggplot(data_video_new, aes(x = "", y = percent, fill = new_category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  scale_fill_manual(values = blues) + # specify the blue color palette#
  theme_void() +#
  geom_text(aes(label = ifelse(percent >= 0.1, paste0(round(percent * 100), "%"), "")), #
            position = position_stack(vjust = 0.5))#
#
pie_chart#
#
#=====================================================#
# Create the bar chart#
bar_chart <- ggplot(data, aes(x = category, y = al, fill = category)) +#
  geom_bar(stat = "identity") +#
  labs(x = "Category", y = "Average video length in seconds", fill = "Category") +#
  ggtitle("Video Lengths by Category")+#
  theme(axis.text.x = element_blank(),#
        axis.ticks.x = element_blank())#
#
bar_chart #
#=====================================================#
#Views Vs Comments #
#
df <- df_comment_degree#
# Calculate the median value of views#
views_median <- median(df_comment_degree$views)#
#
# Divide the videos into two groups: high views and low views#
high_views <- df[df$views > views_median, ]#
low_views <- df[df$views <= views_median, ]#
# Calculate the mean number of comments for each group#
high_views_mean <- mean(high_views$comments)#
low_views_mean <- mean(low_views$comments)#
#
# Create a new data frame for the boxplot#
boxplot_data <- data.frame(group = c(rep("High Views", nrow(high_views)), rep("Low Views", nrow(low_views))),#
                           comments = c(high_views$comments, low_views$comments))#
#
# Create a boxplot with ggplot2#
ggplot(boxplot_data, aes(x = group, y = comments)) +#
  geom_boxplot() +#
  geom_point(aes(color = group), alpha = .5, position = position_jitter(width = .15)) +#
  labs(title = "Relationship between Views and Comments on Videos",#
       x = "",#
       y = "Comments") +#
  stat_compare_means(method = "t.test", label = "p.format") #
# Create a scatter plot #
ggplot(df_comment_degree, aes(x = views, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
   scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Scatterplot of Views and Comments on Videos",#
       x = "Views",#
       y = "Comments")#
ggplot(df_comment_degree, aes(x = degree, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
  labs(title = "Scatterplot of Degree and Comments on Videos",#
       x = "Degree",#
       y = "Comments")#
#compare the two #
#
# create a linear regression model#
model <- lm(comments ~ views + degree, data = df_comment_degree)#
#
# print the summary of the model#
summary(model)#
library(ggplot2)#
  ggplot(df_comment_degree, aes(x = views, y = degree, size = comments)) + #
  geom_point(alpha = .5, color = "#3366FF") +#
  scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Impact of Views and Degree on Comments",#
       x = "Views",#
       y = "Degree",#
       size = "Number of Comments")#
#=====================================================
df4 <- read.csv("comments1.csv")
# Load required libraries#
library(tidyverse)#
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
library(dplyr)#
library(tidyr)#
#
degree_path <-  file.path(getwd(), "degree.csv")#
top_k_path <- file.path(getwd(), "top_100.csv")#
median_data_path <- file.path(getwd(), "median_stats.csv")#
top_k_data_per_cat_path <- file.path(getwd(), "top_100_per_cat.csv")#
#
degree_data <- read.csv(degree_path)#
# Define the binwidth for backlinks#
binwidth <- 100#
#
# Calculate the number of rows with a certain number of backlinks#
backlinks_counts <- degree_data %>%#
  group_by(backlinks = backlinks %/% binwidth) %>%#
  summarize(count = n())#
#
# Create the bar graph with scaled x-axis and logarithmic y-axis#
p <- ggplot(backlinks_counts, aes(x = backlinks * binwidth, y = count)) +#
  geom_bar(stat = "identity", width = binwidth, fill = "#3366FF") + # Set a uniform reddish/pink color for the bars#
  xlab("Number of backlinks") +#
  ylab("Count") +#
  ggtitle("Number of Videos by Backlinks") +#
  scale_x_continuous(limits = c(0, 1900), # Change the limits to go up to 1900#
                     breaks = seq(0, 1800, binwidth), # Adjust the breaks accordingly#
                     expand = c(0.1, 0.1)) +#
  scale_y_log10(limits = c(1, 10000))#
#
# Adjust the width of the plot using ggsave()#
ggsave("plot.png", p, width = 10, height = 5)#
# Get the maximum value for backlinks#
max_backlinks <- max(degree_data$backlinks)#
#
# Print the maximum value#
cat("The maximum value for backlinks is:", max_backlinks, "\n") #
#
top_k_data <- read.csv(top_k_path)#
category_counts <- top_k_data %>%#
  group_by(category) %>%#
  summarize(count = n()) %>%#
  mutate(percentage = count / sum(count) * 100) %>%#
  arrange(desc(percentage))#
#
category_counts$label <- paste(category_counts$category, " (", round(category_counts$percentage, 1), "%)", sep = "")#
#
pie_chart <- ggplot(category_counts, aes(x = "", y = count, fill = factor(label, levels = label))) +#
  geom_bar(width = 1, stat = "identity") +#
  coord_polar("y", start = 0) +#
  theme_minimal() +#
  theme(axis.title.x = element_blank(),#
        axis.text.x = element_blank(),#
        axis.ticks.x = element_blank(),#
        axis.title.y = element_blank(),#
        axis.text.y = element_blank(),#
        axis.ticks.y = element_blank(),#
        legend.title = element_blank()) +#
  labs(title = "Pie Chart of Video Categories (Ordered by Percentage)")#
#
# Display the pie chart#
print(pie_chart)#
#
top_k_data_per_cat <- read.csv(top_k_data_per_cat_path)#
box_plot <- ggplot(top_k_data_per_cat, aes(x = factor(category), y = length)) +#
  geom_boxplot() +#
  theme_minimal() +#
  labs(title = "Box Plot of Video Lengths by Category",#
       x = "Category",#
       y = "Length (seconds)") +#
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +#
  scale_y_continuous(limits = c(0, 500))#
#
# Display the box plot#
print(box_plot)#
# Code for average/median trends#
#
# Load CSV data#
median_avg_data <- read.csv(median_data_path)#
#
# Reshape the data to make it suitable for creating box plots#
data_long <- median_avg_data %>%#
  gather(key = "metric", value = "value", -category)#
# Create a bar chart function for the desired formatting#
create_bar_chart <- function(data, metric_title) {#
  plot <- ggplot(data, aes(x = factor(category), y = value, fill = factor(category))) +#
    geom_bar(stat = "identity") +#
    theme_minimal() +#
    labs(title = paste("Bar Chart of", metric_title, "by Category"),#
         x = "Category") +#
    theme(axis.text.x = element_text(angle = 45, hjust = 1),#
          axis.title.y = element_blank(),#
          legend.position = "none")#
  return(plot)#
}#
#
# Create and display bar charts for each metric#
average_length_plot <- create_bar_chart(data_long %>% filter(metric == "average_length"), "Average Length")#
average_views_plot <- create_bar_chart(data_long %>% filter(metric == "average_views"), "Average Views")#
median_length_plot <- create_bar_chart(data_long %>% filter(metric == "median_length"), "Median Length")#
median_views_plot <- create_bar_chart(data_long %>% filter(metric == "median_views"), "Median Views")#
#
print(average_length_plot)#
print(average_views_plot)#
print(median_length_plot)#
print(median_views_plot)
#install packages for data visulization #
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
library(GGally)#
# Disable scientific notation#
options(scipen = 999)#
#=====================================================#
#read csv files#
#
#read this file for the pie chart #
csv_path <- file.path(getwd(), "most_viewed.csv")#
data <- read.csv(csv_path)#
#
#read this file for the bar graphs #
csv_path_total <- file.path(getwd(), "total_views.csv")#
data_video <- read.csv(csv_path_total)#
#
#read these files for the comment vs views #
# Read in the first CSV file as a data frame#
df1 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df2 <- read.csv("views_comments_1.csv")#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
# Read in the data as a data frame#
df <- read.csv("cv_data.csv")#
# Read in the data as a data frame#
df3 <- read.csv("Degree.csv")#
df4 <- read.csv("comments1.csv")#
# Read in the second CSV file as a data frame#
df5 <- read.csv("comments2.csv")#
# Combine the two data frames using rbind()#
df_comment <- rbind(df4, df5)#
# merge the data frames based on videoID#
#
df_comment_degree <- merge(df3, df_comment, by = "videoID")#
#=====================================================#
#Create a Pie chart that shows which category is the most popular #
#
library(ggplot2)#
library(dplyr)#
#
# create a new column called "new_category"#
data_video$new_category <- ifelse(data_video$percent < 0.1, "Other", data_video$category)#
#
# group the data by "new_category" and calculate the sum of "percent" and "total_views" for each group#
data_video_new <- data_video %>%#
  group_by(new_category) %>%#
  summarize(total_views = sum(total_views),#
            percent = sum(percent))#
#
# Define a vector of blues for the fill color scale#
blues <- c("#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494")#
#
# Create the pie chart with the modified fill scale#
ggplot(data_video_new, aes(x = "", y = percent, fill = new_category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  scale_fill_manual(values = blues) + # specify the blue color palette#
  theme_void() +#
  geom_text(aes(label = ifelse(percent >= 0.1, paste0(round(percent * 100), "%"), "")), #
            position = position_stack(vjust = 0.5))#
#
pie_chart#
#
#=====================================================#
# Create the bar chart#
bar_chart <- ggplot(data, aes(x = category, y = al, fill = category)) +#
  geom_bar(stat = "identity") +#
  labs(x = "Category", y = "Average video length in seconds", fill = "Category") +#
  ggtitle("Video Lengths by Category")+#
  theme(axis.text.x = element_blank(),#
        axis.ticks.x = element_blank())#
#
bar_chart #
#=====================================================#
#Views Vs Comments #
#
df <- df_comment_degree#
# Calculate the median value of views#
views_median <- median(df_comment_degree$views)#
#
# Divide the videos into two groups: high views and low views#
high_views <- df[df$views > views_median, ]#
low_views <- df[df$views <= views_median, ]#
# Calculate the mean number of comments for each group#
high_views_mean <- mean(high_views$comments)#
low_views_mean <- mean(low_views$comments)#
#
# Create a new data frame for the boxplot#
boxplot_data <- data.frame(group = c(rep("High Views", nrow(high_views)), rep("Low Views", nrow(low_views))),#
                           comments = c(high_views$comments, low_views$comments))#
#
# Create a boxplot with ggplot2#
ggplot(boxplot_data, aes(x = group, y = comments)) +#
  geom_boxplot() +#
  geom_point(aes(color = group), alpha = .5, position = position_jitter(width = .15)) +#
  labs(title = "Relationship between Views and Comments on Videos",#
       x = "",#
       y = "Comments") +#
  stat_compare_means(method = "t.test", label = "p.format") #
# Create a scatter plot #
ggplot(df_comment_degree, aes(x = views, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
   scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Scatterplot of Views and Comments on Videos",#
       x = "Views",#
       y = "Comments")#
ggplot(df_comment_degree, aes(x = degree, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
  labs(title = "Scatterplot of Degree and Comments on Videos",#
       x = "Degree",#
       y = "Comments")#
#compare the two #
#
# create a linear regression model#
model <- lm(comments ~ views + degree, data = df_comment_degree)#
#
# print the summary of the model#
summary(model)#
library(ggplot2)#
  ggplot(df_comment_degree, aes(x = views, y = degree, size = comments)) + #
  geom_point(alpha = .5, color = "#3366FF") +#
  scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Impact of Views and Degree on Comments",#
       x = "Views",#
       y = "Degree",#
       size = "Number of Comments")#
#=====================================================
#install packages for data visulization #
library(scales)#
library(gridExtra)#
library(ggplot2)#
library(ggpubr)#
library(GGally)#
# Disable scientific notation#
options(scipen = 999)#
#=====================================================#
#read csv files#
#
#read this file for the pie chart #
csv_path <- file.path(getwd(), "most_viewed.csv")#
data <- read.csv(csv_path)#
#
#read this file for the bar graphs #
csv_path_total <- file.path(getwd(), "total_views.csv")#
data_video <- read.csv(csv_path_total)#
#
#read these files for the comment vs views #
# Read in the first CSV file as a data frame#
df1 <- read.csv("views_comments_1.csv")#
# Read in the second CSV file as a data frame#
df2 <- read.csv("views_comments_1.csv")#
# Combine the two data frames using rbind()#
df <- rbind(df1, df2)#
# Read in the data as a data frame#
df <- read.csv("cv_data.csv")#
# Read in the data as a data frame#
df3 <- read.csv("Degree.csv")#
df4 <- read.csv("comments1.csv")#
# Read in the second CSV file as a data frame#
df5 <- read.csv("comments2.csv")#
# Combine the two data frames using rbind()#
df_comment <- rbind(df4, df5)#
# merge the data frames based on videoID#
#
df_comment_degree <- merge(df3, df_comment, by = "videoID")#
#=====================================================#
#Create a Pie chart that shows which category is the most popular #
#
library(ggplot2)#
library(dplyr)#
#
# create a new column called "new_category"#
data_video$new_category <- ifelse(data_video$percent < 0.1, "Other", data_video$category)#
#
# group the data by "new_category" and calculate the sum of "percent" and "total_views" for each group#
data_video_new <- data_video %>%#
  group_by(new_category) %>%#
  summarize(total_views = sum(total_views),#
            percent = sum(percent))#
#
# Define a vector of blues for the fill color scale#
blues <- c("#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494")#
#
# Create the pie chart with the modified fill scale#
ggplot(data_video_new, aes(x = "", y = percent, fill = new_category)) + #
  geom_bar(stat = "identity", width = 1) +#
  coord_polar("y", start = 0) +#
  labs(title = "Video Views by Category", fill = "Category") +#
  scale_fill_manual(values = blues) + # specify the blue color palette#
  theme_void() +#
  geom_text(aes(label = ifelse(percent >= 0.1, paste0(round(percent * 100), "%"), "")), #
            position = position_stack(vjust = 0.5))#
#
pie_chart#
#
#=====================================================#
# Create the bar chart#
bar_chart <- ggplot(data, aes(x = category, y = al, fill = category)) +#
  geom_bar(stat = "identity") +#
  labs(x = "Category", y = "Average video length in seconds", fill = "Category") +#
  ggtitle("Video Lengths by Category")+#
  theme(axis.text.x = element_blank(),#
        axis.ticks.x = element_blank())#
#
bar_chart #
#=====================================================#
#Views Vs Comments #
#
df <- df_comment_degree#
# Calculate the median value of views#
views_median <- median(df_comment_degree$views)#
#
# Divide the videos into two groups: high views and low views#
high_views <- df[df$views > views_median, ]#
low_views <- df[df$views <= views_median, ]#
# Calculate the mean number of comments for each group#
high_views_mean <- mean(high_views$comments)#
low_views_mean <- mean(low_views$comments)#
#
# Create a new data frame for the boxplot#
boxplot_data <- data.frame(group = c(rep("High Views", nrow(high_views)), rep("Low Views", nrow(low_views))),#
                           comments = c(high_views$comments, low_views$comments))#
#
# Create a boxplot with ggplot2#
ggplot(boxplot_data, aes(x = group, y = comments)) +#
  geom_boxplot() +#
  geom_point(aes(color = group), alpha = .5, position = position_jitter(width = .15)) +#
  labs(title = "Relationship between Views and Comments on Videos",#
       x = "",#
       y = "Comments") +#
  stat_compare_means(method = "t.test", label = "p.format") #
# Create a scatter plot #
ggplot(df_comment_degree, aes(x = views, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
   scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Scatterplot of Views and Comments on Videos",#
       x = "Views",#
       y = "Comments")#
ggplot(df_comment_degree, aes(x = degree, y = comments)) + #
  geom_point(alpha = .2, color = "#3366FF") +#
  labs(title = "Scatterplot of Degree and Comments on Videos",#
       x = "Degree",#
       y = "Comments")#
#compare the two #
#
# create a linear regression model#
model <- lm(comments ~ views + degree, data = df_comment_degree)#
#
# print the summary of the model#
summary(model)#
library(ggplot2)#
  ggplot(df_comment_degree, aes(x = views, y = degree, size = comments)) + #
  geom_point(alpha = .5, color = "#3366FF") +#
  scale_size(range = c(1, 10), breaks = seq(0, 20000, by = 5000)) +#
  scale_x_continuous(labels = scales::number_format(scale = 1e-6, accuracy = 0.1, suffix = "M")) +#
  labs(title = "Impact of Views and Degree on Comments",#
       x = "Views",#
       y = "Degree",#
       size = "Number of Comments")#
#=====================================================
